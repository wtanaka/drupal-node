<?php
// $Id: node.module,v 1.947.2.15 2009/02/16 14:39:40 goba Exp $

define('NODE_NEW_LIMIT', time() - 30 * 24 * 60 * 60);

define('NODE_BUILD_NORMAL', 0);
define('NODE_BUILD_PREVIEW', 1);
define('NODE_BUILD_SEARCH_INDEX', 2);
define('NODE_BUILD_SEARCH_RESULT', 3);
define('NODE_BUILD_RSS', 4);
define('NODE_BUILD_PRINT', 5);

/**
 * Implementation of hook_help().
 */
function node_help($path, $arg) {
  // Remind site administrators about the {node_access} table being flagged
  // for rebuild. We don't need to issue the message on the confirm form, or
  // while the rebuild is being processed.
  if ($path != 'admin/content/node-settings/rebuild' && $path != 'batch' && strpos($path, '#') === FALSE
      && user_access('access administration pages') && node_access_needs_rebuild()) {
    if ($path == 'admin/content/node-settings') {
      $message = t('The content access permissions need to be rebuilt.');
    }
    else {
      $message = t('The content access permissions need to be rebuilt. Please visit <a href="@node_access_rebuild">this page</a>.', array('@node_access_rebuild' => url('admin/content/node-settings/rebuild')));
    }
    drupal_set_message($message, 'error');
  }

  switch ($path) {
    case 'admin/help#node':
      $output = '<p>'. t('The node module manages content on your site, and stores all posts (regardless of type) as a "node". In addition to basic publishing settings, including whether the post has been published, promoted to the site front page, or should remain present (or sticky) at the top of lists, the node module also records basic information about the author of a post. Optional revision control over edits is available. For additional functionality, the node module is often extended by other modules.') .'</p>';
      $output .= '<p>'. t('Though each post on your site is a node, each post is also of a particular <a href="@content-type">content type</a>. <a href="@content-type">Content types</a> are used to define the characteristics of a post, including the title and description of the fields displayed on its add and edit pages. Each content type may have different default settings for <em>Publishing options</em> and other workflow controls. By default, the two content types in a standard Drupal installation are <em>Page</em> and <em>Story</em>. Use the <a href="@content-type">content types page</a> to add new or edit existing content types. Additional content types also become available as you enable additional core, contributed and custom modules.', array('@content-type' => url('admin/content/types'))) .'</p>';
      $output .= '<p>'. t('The administrative <a href="@content">content page</a> allows you to review and manage your site content. The <a href="@post-settings">post settings page</a> sets certain options for the display of posts. The node module makes a number of permissions available for each content type, which may be set by role on the <a href="@permissions">permissions page</a>.', array('@content' => url('admin/content/node'), '@post-settings' => url('admin/content/node-settings'), '@permissions' => url('admin/user/permissions'))) .'</p>';
      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@node">Node module</a>.', array('@node' => 'http://drupal.org/handbook/modules/node/')) .'</p>';
      return $output;
    case 'admin/content/node':
      return ' '; // Return a non-null value so that the 'more help' link is shown.
    case 'admin/content/types':
      return '<p>'. t('Below is a list of all the content types on your site. All posts that exist on your site are instances of one of these content types.') .'</p>';
    case 'admin/content/types/add':
      return '<p>'. t('To create a new content type, enter the human-readable name, the machine-readable name, and all other relevant fields that are on this page. Once created, users of your site will be able to create posts that are instances of this content type.') .'</p>';
    case 'node/%/revisions':
      return '<p>'. t('The revisions let you track differences between multiple versions of a post.') .'</p>';
    case 'node/%/edit':
      $node = node_load($arg[1]);
      $type = node_get_types('type', $node->type);
      return (!empty($type->help) ? '<p>'. filter_xss_admin($type->help) .'</p>' : '');
  }

  if ($arg[0] == 'node' && $arg[1] == 'add' && $arg[2]) {
    $type = node_get_types('type', str_replace('-', '_', $arg[2]));
    return (!empty($type->help) ? '<p>'. filter_xss_admin($type->help) .'</p>' : '');
  }
}

function node_theme() {
  include_once dirname(__FILE__).'/modules.inc.php';
  return _real_node_theme();
}

/**
 * Implementation of hook_cron().
 */
function node_cron() {
  db_query('DELETE FROM {history} WHERE timestamp < %d', NODE_NEW_LIMIT);
}

function node_title_list($result, $title = NULL) {
  include_once dirname(__FILE__).'/extra.inc.php';
  return _real_node_title_list($result, $title);
}

function theme_node_list($items, $title = NULL) {
  return theme('item_list', $items, $title);
}

function node_tag_new($nid) {
  include_once dirname(__FILE__).'/nodeview.inc.php';
  return _real_node_tag_new($nid);
}

function node_last_viewed($nid) {
  include_once dirname(__FILE__).'/nodeview.inc.php';
  return _real_node_last_viewed($nid);
}

function node_mark($nid, $timestamp) {
  include_once dirname(__FILE__).'/nodeview.inc.php';
  return _real_node_mark($nid, $timestamp);
}

function node_teaser_js(&$form, &$form_state) {
  include_once dirname(__FILE__).'/form.inc.php';
  return _real_node_teaser_js($form, $form_state);
}

function node_teaser_include_verify(&$form, &$form_state) {
  include_once dirname(__FILE__).'/form.inc.php';
  return _real_node_teaser_include_verify($form, $form_state);
}

function node_teaser($body, $format = NULL, $size = NULL) {
  include_once dirname(__FILE__).'/extra.inc.php';
  return _real_node_teaser($body, $format, $size);
}

/**
 * Builds a list of available node types, and returns all of part of this list
 * in the specified format.
 *
 * @param $op
 *   The format in which to return the list. When this is set to 'type',
 *   'module', or 'name', only the specified node type is returned. When set to
 *   'types' or 'names', all node types are returned.
 * @param $node
 *   A node object, array, or string that indicates the node type to return.
 *   Leave at default value (NULL) to return a list of all node types.
 * @param $reset
 *   Whether or not to reset this function's internal cache (defaults to
 *   FALSE).
 *
 * @return
 *   Either an array of all available node types, or a single node type, in a
 *   variable format. Returns FALSE if the node type is not found.
 */
function node_get_types($op = 'types', $node = NULL, $reset = FALSE) {
  static $_node_types, $_node_names;

  if ($reset || !isset($_node_types)) {
    list($_node_types, $_node_names) = _node_types_build();
  }

  if ($node) {
    if (is_array($node)) {
      $type = $node['type'];
    }
    elseif (is_object($node)) {
      $type = $node->type;
    }
    elseif (is_string($node)) {
      $type = $node;
    }
    if (!isset($_node_types[$type])) {
      return FALSE;
    }
  }
  switch ($op) {
    case 'types':
      return $_node_types;
    case 'type':
      return isset($_node_types[$type]) ? $_node_types[$type] : FALSE;
    case 'module':
      return isset($_node_types[$type]->module) ? $_node_types[$type]->module : FALSE;
    case 'names':
      return $_node_names;
    case 'name':
      return isset($_node_names[$type]) ? $_node_names[$type] : FALSE;
  }
}

function node_types_rebuild() {
  include_once dirname(__FILE__).'/modules.inc.php';
  return _real_node_types_rebuild();
}

function node_type_save($info) {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _real_node_type_save($info);
}

function node_type_delete($type) {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _real_node_type_delete($type);
}

function node_type_update_nodes($old_type, $type) {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _real_node_type_update_nodes($old_type, $type);
}

/**
 * Builds and returns the list of available node types.
 *
 * The list of types is built by querying hook_node_info() in all modules, and
 * by comparing this information with the node types in the {node_type} table.
 *
 */
function _node_types_build() {
  $_node_types = array();
  $_node_names = array();

  $info_array = module_invoke_all('node_info');
  foreach ($info_array as $type => $info) {
    $info['type'] = $type;
    $_node_types[$type] = (object) _node_type_set_defaults($info);
    $_node_names[$type] = $info['name'];
  }

  $type_result = db_query(db_rewrite_sql('SELECT nt.type, nt.* FROM {node_type} nt ORDER BY nt.type ASC', 'nt', 'type'));
  while ($type_object = db_fetch_object($type_result)) {
    // Check for node types from disabled modules and mark their types for removal.
    // Types defined by the node module in the database (rather than by a separate
    // module using hook_node_info) have a module value of 'node'.
    if ($type_object->module != 'node' && empty($info_array[$type_object->type])) {
      $type_object->disabled = TRUE;
    }
    if (!isset($_node_types[$type_object->type]) || $type_object->modified) {
      $_node_types[$type_object->type] = $type_object;
      $_node_names[$type_object->type] = $type_object->name;

      if ($type_object->type != $type_object->orig_type) {
        unset($_node_types[$type_object->orig_type]);
        unset($_node_names[$type_object->orig_type]);
      }
    }
  }

  asort($_node_names);

  return array($_node_types, $_node_names);
}

/**
 * Set default values for a node type defined through hook_node_info().
 */
function _node_type_set_defaults($info) {
  if (!isset($info['has_title'])) {
    $info['has_title'] = TRUE;
  }
  if ($info['has_title'] && !isset($info['title_label'])) {
    $info['title_label'] = t('Title');
  }

  if (!isset($info['has_body'])) {
    $info['has_body'] = TRUE;
  }
  if ($info['has_body'] && !isset($info['body_label'])) {
    $info['body_label'] = t('Body');
  }

  if (!isset($info['help'])) {
    $info['help'] = '';
  }
  if (!isset($info['min_word_count'])) {
    $info['min_word_count'] = 0;
  }
  if (!isset($info['custom'])) {
    $info['custom'] = FALSE;
  }
  if (!isset($info['modified'])) {
    $info['modified'] = FALSE;
  }
  if (!isset($info['locked'])) {
    $info['locked'] = TRUE;
  }

  $info['orig_type'] = $info['type'];
  $info['is_new'] = TRUE;

  return $info;
}

/**
 * Determine whether a node hook exists.
 *
 * @param &$node
 *   Either a node object, node array, or a string containing the node type.
 * @param $hook
 *   A string containing the name of the hook.
 * @return
 *   TRUE iff the $hook exists in the node type of $node.
 */
function node_hook(&$node, $hook) {
  $module = node_get_types('module', $node);
  if ($module == 'node') {
    $module = 'node_content'; // Avoid function name collisions.
  }
  return module_hook($module, $hook);
}

function node_invoke(&$node, $hook, $a2 = NULL, $a3 = NULL, $a4 = NULL) {
  include_once dirname(__FILE__).'/nodeview.inc.php';
  return _real_node_invoke($node, $hook, $a2, $a3, $a4);
}

function node_invoke_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  include_once dirname(__FILE__).'/nodeview.inc.php';
  return _real_node_invoke_nodeapi($node, $op, $a3, $a4);
}

function node_load($param = array(), $revision = NULL, $reset = NULL) {
  static $nodes = array();

  if ($reset) {
    $nodes = array();
  }

  $cachable = ($revision == NULL);
  $arguments = array();
  if (is_numeric($param)) {
    if ($cachable) {
      // Is the node statically cached?
      if (isset($nodes[$param])) {
        return is_object($nodes[$param]) ? drupal_clone($nodes[$param]) : $nodes[$param];
      }
    }
    $cond = 'n.nid = %d';
    $arguments[] = $param;
  }
  elseif (is_array($param)) {
    // Turn the conditions into a query.
    foreach ($param as $key => $value) {
      $cond[] = 'n.'. db_escape_table($key) ." = '%s'";
      $arguments[] = $value;
    }
    $cond = implode(' AND ', $cond);
  }
  else {
    return FALSE;
  }

  // Retrieve a field list based on the site's schema.
  $fields = drupal_schema_fields_sql('node', 'n');
  $fields = array_merge($fields, drupal_schema_fields_sql('node_revisions', 'r'));
  $fields = array_merge($fields, array('u.name', 'u.picture', 'u.data'));
  // Remove fields not needed in the query: n.vid and r.nid are redundant,
  // n.title is unnecessary because the node title comes from the
  // node_revisions table.  We'll keep r.vid, r.title, and n.nid.
  $fields = array_diff($fields, array('n.vid', 'n.title', 'r.nid'));
  $fields = implode(', ', $fields);
  // Rename timestamp field for clarity.
  $fields = str_replace('r.timestamp', 'r.timestamp AS revision_timestamp', $fields);
  // Change name of revision uid so it doesn't conflict with n.uid.
  $fields = str_replace('r.uid', 'r.uid AS revision_uid', $fields);

  // Retrieve the node.
  // No db_rewrite_sql is applied so as to get complete indexing for search.
  if ($revision) {
    array_unshift($arguments, $revision);
    $node = db_fetch_object(db_query('SELECT '. $fields .' FROM {node} n INNER JOIN {users} u ON u.uid = n.uid INNER JOIN {node_revisions} r ON r.nid = n.nid AND r.vid = %d WHERE '. $cond, $arguments));
  }
  else {
    $node = db_fetch_object(db_query('SELECT '. $fields .' FROM {node} n INNER JOIN {users} u ON u.uid = n.uid INNER JOIN {node_revisions} r ON r.vid = n.vid WHERE '. $cond, $arguments));
  }

  if ($node && $node->nid) {
    // Call the node specific callback (if any) and piggy-back the
    // results to the node or overwrite some values.
    if ($extra = node_invoke($node, 'load')) {
      foreach ($extra as $key => $value) {
        $node->$key = $value;
      }
    }

    if ($extra = node_invoke_nodeapi($node, 'load')) {
      foreach ($extra as $key => $value) {
        $node->$key = $value;
      }
    }
    if ($cachable) {
      $nodes[$node->nid] = is_object($node) ? drupal_clone($node) : $node;
    }
  }

  return $node;
}

function node_validate($node, $form = array()) {
  include_once dirname(__FILE__).'/edit.inc.php';
  return _real_node_validate($node, $form);
}

function node_submit($node) {
  include_once dirname(__FILE__).'/edit.inc.php';
  return _real_node_submit($node);
}

function node_save(&$node) {
  include_once dirname(__FILE__).'/edit.inc.php';
  return _real_node_save($node);
}

function _node_save_revision(&$node, $uid, $update = NULL) {
  include_once dirname(__FILE__).'/edit.inc.php';
  return _real__node_save_revision($node, $uid, $update);
}

function node_delete($nid) {
  include_once dirname(__FILE__).'/edit.inc.php';
  return _real_node_delete($nid);
}

function node_view($node, $teaser = FALSE, $page = FALSE, $links = TRUE) {
  include_once dirname(__FILE__).'/nodeview.inc.php';
  return _real_node_view($node, $teaser, $page, $links);
}

function node_prepare($node, $teaser = FALSE) {
  include_once dirname(__FILE__).'/nodeview.inc.php';
  return _real_node_prepare($node, $teaser);
}

function node_build_content($node, $teaser = FALSE, $page = FALSE) {
  include_once dirname(__FILE__).'/nodeview.inc.php';
  return _real_node_build_content($node, $teaser, $page);
}

function node_show($node, $cid, $message = FALSE) {
  include_once dirname(__FILE__).'/nodeview.inc.php';
  return _real_node_show($node, $cid, $message);
}

function theme_node_log_message($log) {
  include_once dirname(__FILE__).'/extra.inc.php';
  return _real_theme_node_log_message($log);
}

function node_perm() {
  include_once dirname(__FILE__).'/perm.inc.php';
  return _real_node_perm();
}

function node_search($op = 'search', $keys = NULL) {
  include_once dirname(__FILE__).'/search.inc.php';
  return _real_node_search($op, $keys);
}

/**
 * Implementation of hook_user().
 */
function node_user($op, &$edit, &$user) {
  if ($op == 'delete') {
    db_query('UPDATE {node} SET uid = 0 WHERE uid = %d', $user->uid);
    db_query('UPDATE {node_revisions} SET uid = 0 WHERE uid = %d', $user->uid);
  }
}

function theme_node_search_admin($form) {
  include_once dirname(__FILE__).'/admin.inc.php';
  return _real_theme_node_search_admin($form);
}

function node_comment_mode($nid) {
  include_once dirname(__FILE__).'/nodeview.inc.php';
  return _real_node_comment_mode($nid);
}

function node_link($type, $node = NULL, $teaser = FALSE) {
  include_once dirname(__FILE__).'/nodeview.inc.php';
  return _real_node_link($type, $node, $teaser);
}

function _node_revision_access($node, $op = 'view') {
  include_once dirname(__FILE__).'/nodeview.inc.php';
  return _real__node_revision_access($node, $op);
}

function _node_add_access() {
  $types = node_get_types();
  foreach ($types as $type) {
    if (node_hook($type->type, 'form') && node_access('create', $type->type)) {
      return TRUE;
    }
  }
  return FALSE;
}

function node_menu() {
  include_once dirname(__FILE__).'/modules.inc.php';
  return _real_node_menu();
}

function node_page_title($node) {
  return $node->title;
}

/**
 * Implementation of hook_init().
 */
function node_init() {
  drupal_add_css(drupal_get_path('module', 'node') .'/node.css');
}

function node_last_changed($nid) {
  include_once dirname(__FILE__).'/edit.inc.php';
  return _real_node_last_changed($nid);
}

function node_revision_list($node) {
  include_once dirname(__FILE__).'/extra.inc.php';
  return _real_node_revision_list($node);
}

function node_block($op = 'list', $delta = 0) {
  include_once dirname(__FILE__).'/extra.inc.php';
  return _real_node_block($op, $delta);
}

function node_feed($nids = FALSE, $channel = array()) {
  include_once dirname(__FILE__).'/extra.inc.php';
  return _real_node_feed($nids, $channel);
}

function node_page_default() {
  include_once dirname(__FILE__).'/pagedefault.inc.php';
  return _real_node_page_default();
}

function node_page_view($node, $cid = NULL) {
  drupal_set_title(check_plain($node->title));
  return node_show($node, $cid);
}

function node_update_index() {
  include_once dirname(__FILE__).'/search.inc.php';
  return _real_node_update_index();
}

function _node_index_node($node) {
  include_once dirname(__FILE__).'/search.inc.php';
  return _real__node_index_node($node);
}

function node_form_alter(&$form, $form_state, $form_id) {
  // Advanced node search form
  if ($form_id == 'search_form' && $form['module']['#value'] == 'node' && user_access('use advanced search')) {
    include_once dirname(__FILE__).'/search.inc.php';
    return _real_node_form_alter($form, $form_state, $form_id);
  }
}

function node_search_validate($form, &$form_state) {
  include_once dirname(__FILE__).'/search.inc.php';
  return _real_node_search_validate($form, $form_state);
}

/**
 * Determine whether the current user may perform the given operation on the
 * specified node.
 *
 * @param $op
 *   The operation to be performed on the node. Possible values are:
 *   - "view"
 *   - "update"
 *   - "delete"
 *   - "create"
 * @param $node
 *   The node object (or node array) on which the operation is to be performed,
 *   or node type (e.g. 'forum') for "create" operation.
 * @param $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 * @return
 *   TRUE if the operation may be performed.
 */
function node_access($op, $node, $account = NULL) {
  global $user;

  if (!$node || !in_array($op, array('view', 'update', 'delete', 'create'), TRUE)) {
    // If there was no node to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // Convert the node to an object if necessary:
  if ($op != 'create') {
    $node = (object)$node;
  }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $user;
  }
  // If the node is in a restricted format, disallow editing.
  if ($op == 'update' && !filter_access($node->format)) {
    return FALSE;
  }

  if (user_access('administer nodes', $account)) {
    return TRUE;
  }

  if (!user_access('access content', $account)) {
    return FALSE;
  }

  // Can't use node_invoke(), because the access hook takes the $op parameter
  // before the $node parameter.
  $module = node_get_types('module', $node);
  if ($module == 'node') {
    $module = 'node_content'; // Avoid function name collisions.
  }
  $access = module_invoke($module, 'access', $op, $node, $account);
  if (!is_null($access)) {
    return $access;
  }

  // If the module did not override the access rights, use those set in the
  // node_access table.
  if ($op != 'create' && $node->nid && $node->status) {
    $grants = array();
    foreach (node_access_grants($op, $account) as $realm => $gids) {
      foreach ($gids as $gid) {
        $grants[] = "(gid = $gid AND realm = '$realm')";
      }
    }

    $grants_sql = '';
    if (count($grants)) {
      $grants_sql = 'AND ('. implode(' OR ', $grants) .')';
    }

    $sql = "SELECT COUNT(*) FROM {node_access} WHERE (nid = 0 OR nid = %d) $grants_sql AND grant_$op >= 1";
    $result = db_query($sql, $node->nid);
    return (db_result($result));
  }

  // Let authors view their own nodes.
  if ($op == 'view' && $account->uid == $node->uid && $account->uid != 0) {
    return TRUE;
  }

  return FALSE;
}

function _node_access_join_sql($node_alias = 'n', $node_access_alias = 'na') {
  include_once dirname(__FILE__).'/extra.inc.php';
  return _real__node_access_join_sql($node_alias, $node_access_alias);
}

function _node_access_where_sql($op = 'view', $node_access_alias = 'na', $account = NULL) {
  include_once dirname(__FILE__).'/extra.inc.php';
  return _real__node_access_where_sql($op, $node_access_alias, $account);
}

/**
 * Fetch an array of permission IDs granted to the given user ID.
 *
 * The implementation here provides only the universal "all" grant. A node
 * access module should implement hook_node_grants() to provide a grant
 * list for the user.
 *
 * @param $op
 *   The operation that the user is trying to perform.
 * @param $account
 *   The user object for the user performing the operation. If omitted, the
 *   current user is used.
 * @return
 *   An associative array in which the keys are realms, and the values are
 *   arrays of grants for those realms.
 */
function node_access_grants($op, $account = NULL) {

  if (!isset($account)) {
    $account = $GLOBALS['user'];
  }

  return array_merge(array('all' => array(0)), module_invoke_all('node_grants', $account, $op));
}

/**
 * Determine whether the user has a global viewing grant for all nodes.
 */
function node_access_view_all_nodes() {
  static $access;

  if (!isset($access)) {
    $grants = array();
    foreach (node_access_grants('view') as $realm => $gids) {
      foreach ($gids as $gid) {
        $grants[] = "(gid = $gid AND realm = '$realm')";
      }
    }

    $grants_sql = '';
    if (count($grants)) {
      $grants_sql = 'AND ('. implode(' OR ', $grants) .')';
    }

    $sql = "SELECT COUNT(*) FROM {node_access} WHERE nid = 0 $grants_sql AND grant_view >= 1";
    $result = db_query($sql);
    $access = db_result($result);
  }

  return $access;
}

/**
 * Implementation of hook_db_rewrite_sql
 */
function node_db_rewrite_sql($query, $primary_table, $primary_field) {
  if ($primary_field == 'nid' && !node_access_view_all_nodes()) {
    $return['join'] = _node_access_join_sql($primary_table);
    $return['where'] = _node_access_where_sql();
    $return['distinct'] = 1;
    return $return;
  }
}

function node_access_acquire_grants($node) {
  include_once dirname(__FILE__).'/edit.inc.php';
  return _real_node_access_acquire_grants($node);
}

function node_access_write_grants($node, $grants, $realm = NULL, $delete = TRUE) {
  include_once dirname(__FILE__).'/edit.inc.php';
  return _real_node_access_write_grants($node, $grants, $realm, $delete);
}

function node_access_needs_rebuild($rebuild = NULL) {
  if (!isset($rebuild)) {
    return variable_get('node_access_needs_rebuild', FALSE);
  }
  elseif ($rebuild) {
    variable_set('node_access_needs_rebuild', TRUE);
  }
  else {
    variable_del('node_access_needs_rebuild');
  }
}

function node_access_rebuild($batch_mode = FALSE) {
  include_once dirname(__FILE__).'/nodeaccessrebuild.inc.php';
  return _real_node_access_rebuild($batch_mode);
}

function _node_access_rebuild_batch_operation(&$context) {
  include_once dirname(__FILE__).'/nodeaccessrebuild.inc.php';
  return _real__node_access_rebuild_batch_operation($context);
}

function _node_access_rebuild_batch_finished($success, $results, $operations) {
  include_once dirname(__FILE__).'/nodeaccessrebuild.inc.php';
  return _real__node_access_rebuild_batch_finished($success, $results, $operations);
}

/**
 * Implementation of hook_access().
 *
 * Named so as not to conflict with node_access()
 */
function node_content_access($op, $node, $account) {
  $type = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);

  if ($op == 'create') {
    return user_access('create '. $type .' content', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any '. $type .' content', $account) || (user_access('edit own '. $type .' content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any '. $type .' content', $account) || (user_access('delete own '. $type .' content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

function node_content_form($node, $form_state) {
  include_once dirname(__FILE__).'/form.inc.php';
  return _real_node_content_form($node, $form_state);
}

/**
 * Implementation of hook_forms(). All node forms share the same form handler
 */
function node_forms() {
  $forms = array();
  if ($types = node_get_types()) {
    foreach (array_keys($types) as $type) {
      $forms[$type .'_node_form']['callback'] = 'node_form';
    }
  }
  return $forms;
}

function theme_node_submitted($node) {
  include_once dirname(__FILE__).'/extra.inc.php';
  return _real_theme_node_submitted($node);
}

function node_hook_info() {
  include_once dirname(__FILE__).'/extra.inc.php';
  return _real_node_hook_info();
}

function node_action_info() {
  include_once dirname(__FILE__).'/actioninfo.inc.php';
  return _real_node_action_info();
}

function node_publish_action(&$node, $context = array()) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_action_info();
}

function node_unpublish_action(&$node, $context = array()) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_unpublish_action($node, $context);
}

function node_make_sticky_action(&$node, $context = array()) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_make_sticky_action($node, $context);
}

function node_make_unsticky_action(&$node, $context = array()) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_make_unsticky_action($node, $context);
}

function node_promote_action(&$node, $context = array()) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_promote_action($node, $context);
}

function node_unpromote_action(&$node, $context = array()) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_unpromote_action($node, $context);
}

function node_save_action($node) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_save_action($node);
}

function node_assign_owner_action(&$node, $context) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_assign_owner_action($node, $context);
}

function node_assign_owner_action_form($context) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_assign_owner_action_form($context);
}

function node_assign_owner_action_validate($form, $form_state) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_assign_owner_action_validate($form, $form_state);
}

function node_assign_owner_action_submit($form, $form_state) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_assign_owner_action_submit($form, $form_state);
}

function node_unpublish_by_keyword_action_form($context) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_unpublish_by_keyword_action_form($context);
}

function node_unpublish_by_keyword_action_submit($form, $form_state) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_unpublish_by_keyword_action_submit($form, $form_state);
}

function node_unpublish_by_keyword_action($node, $context) {
  include_once dirname(__FILE__).'/action.inc.php';
  return _real_node_unpublish_by_keyword_action($node, $context);
}
